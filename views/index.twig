<html>

<head>
  <title>Socketify</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  <script src="/socket.io/socket.io.js"></script>
  <script src="/node_modules/spotify-web-api-js/src/spotify-web-api.js"></script>
</head>


<style>
  body {
    font-family: "Arial", sans-serif;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    width: 100vw;
    margin: 0;
  }

  #spotify-widget {
    background-color: #121212;
    border-radius: 10px;
    overflow: hidden;
    width: 90vw;
    display: none;
    align-items: center;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
  }

  .album-cover {
    width: 20vw;
    /* Adjusted to viewport width */
    height: 20vw;
    /* Adjusted to viewport width */
    border-radius: 8px;
    margin-right: 15px;
  }

  .track-info {
    flex-grow: 1;
    padding: 15px;
  }

  .music-name,
  .artist-name {
    margin: 0;
    font-size: 3vw;
    /* Adjusted to viewport width */
    color: #1DB954;
  }

  .time-info {
    color: #ccc;
    font-size: 2vw;
    /* Adjusted to viewport width */
  }

  .progress-container {
    flex-shrink: 0;
    display: flex;
    flex-direction: row;
    align-items: center;
    column-gap: 2vw;
    /* Adjusted to viewport width */
  }

  .time-bar-background {
    border-radius: 30px;
    height: 1vw;
    /* Adjusted to viewport width */
    background-color: #333;
    /* Dark gray */
    width: 100%;
    border-radius: 4px;
  }

  .time-bar {
    height: 100%;
    background-color: #1DB954;
    /* Green */
    width: 0%;
    border-radius: 30px;
  }

  #durationInfo {
    color: #ccc;
    font-size: 2vw;
    /* Adjusted to viewport width */
    text-align: right;
  }
</style>

<body>
  <div id="spotify-widget">
    <img alt="Album Cover" id="albumCover" class="album-cover">
    <div class="track-info">
      <p id="musicName" class="music-name"></p>
      <p id="artistName" class="artist-name"></p>
      <div class="progress-container">
        <div class="time-info" id="currentDurationInfo"></div>
        <div class="time-bar-background">
          <div class="time-bar" id="timeBar"></div>
        </div>
        <div class="time-info" id="durationInfo"></div>
      </div>
    </div>
  </div>
</body>


<script>

  // Get the elements from the DOM
  const spotifyWidgetElement = document.getElementById("spotify-widget");
  const albumCoverElement = document.getElementById("albumCover");
  const musicNameElement = document.getElementById("musicName");
  const artistNameElement = document.getElementById("artistName");
  const timeInfoElement = document.getElementById("currentDurationInfo");
  const durationInfoElement = document.getElementById("durationInfo");
  const timeBarElement = document.getElementById("timeBar");


  // Establish a connection to the Socket.io server
  const socket = new io();
  const spotifyApi = new SpotifyWebApi();

  // Send the username to the server when the connection is established
  socket.on('connect', () => {
    console.log("connected");
    socket.emit('join', "{{username}}");
  });

  // Handle messages received from the server
  socket.on('track', (accessToken) => {
    track(accessToken);
  });

  socket.on('duplicate', () => {
    document.getElementById('uyari').innerHTML = "Bu spotify hesabı kullanımda. Lütfen başka bir hesap giriniz.";
    setTimeout(() => {
      window.location.href = "/";
    }, 10000)
  })

  // Handle disconnection from the server
  socket.on('disconnect', () => {
    window.location.href = "/logout";
    console.log("close");
  });


  function track(accessToken) {
    var musicName = "";
    var artistName = "";
    var currentDuration = 0;
    var duration = 0;
    let timeout = 1000;

    spotifyApi.setAccessToken(accessToken);

    var checkPlayingInterval = function () {
      spotifyApi.getMyCurrentPlayingTrack().then((data) => {
        if (data) {
          if (data.is_playing) {
            if (window.getComputedStyle(spotifyWidgetElement).display == "none") {
              spotifyWidgetElement.style.display = "flex";
            }
            console.log(Math.round(currentDuration) - Math.round(progress_ms));
            if (data.item.name != musicName || data.item.artists[0].name != artistName || Math.abs(Math.round(currentDuration) - Math.round(progress_ms)) > 3000) {
              console.log("update");
              musicName = data.item.name;
              artistName = data.item.artists[0].name;
              currentDuration = data.progress_ms;
              duration = data.item.duration_ms;

              albumCoverElement.src = data.item.album.images[0].url;
              musicNameElement.textContent = data.item.name;
              artistNameElement.textContent = data.item.artists[0].name;

            }
            currentDuration += timeout;

          } else {
            if (window.getComputedStyle(spotifyWidgetElement).display == "flex") {
              spotifyWidgetElement.style.display = "none";
            }
          }
          updateProgressBar(currentDuration / 1000, duration / 1000);
        }
        setTimeout(checkPlayingInterval, timeout);

      }).catch((err) => {
        console.log(err)
        if (err.status == 401) {
          socket.emit('refreshToken', "{{username}}");
        }
      })

    }
    checkPlayingInterval();
  }

  function updateProgressBar(currentDuration, duration) {
    const progress = (currentDuration / duration) * 100;
    timeBarElement.style.width = `${progress}%`; // Erase to white
    timeBarElement.style.backgroundColor = '#fff'; // White

    // Format time info
    const formattedCurrentTime = formatTime(currentDuration);
    const formattedDuration = formatTime(duration);
    timeInfoElement.textContent = formattedCurrentTime;
    durationInfoElement.textContent = formattedDuration;
  }

  // Format time in MM:SS
  function formatTime(timeInSeconds) {
    const minutes = Math.floor(timeInSeconds / 60);
    const seconds = Math.floor(timeInSeconds % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  }
</script>