<html>

<head>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  <script src="/socket.io/socket.io.js"></script>
  <script src="/node_modules/spotify-web-api-js/src/spotify-web-api.js"></script>
</head>

<body>
  <div class="container">
    <h1 id="uyari" class="d-flex justify-content-center align-items-center" style="margin-bottom: 4vh; color:red;">
      Websocket</h1>
    <div class="d-flex justify-content-center align-items-center">
      <img id="image" style="max-height: 20vh; max-width: 20vw; margin-right: 1vw;"></img>
      <div>
        <h3 id="name"></h3>
        <h2 id="artist"></h2>
      </div>
    </div>
    <canvas id="canvas"></canvas>
  </div>
</body>


<script>
  console.log("aloooooooooo")
  // Establish a connection to the Socket.io server
  const socket = new io();
  const spotifyApi = new SpotifyWebApi();

  // Send the username to the server when the connection is established
  socket.on('connect', () => {
    console.log("connected");
    socket.emit('join', "{{username}}");
  });

  // Handle messages received from the server
  socket.on('track', (accessToken) => {
    console.log(accessToken);
    console.log("data geldi")
    track(accessToken);
    /*    document.getElementById('image').src = data.image;
       document.getElementById('name').innerHTML = data.name;
       document.getElementById('artist').innerHTML = data.artist; */
  });

  socket.on('duplicate', () => {
    document.getElementById('uyari').innerHTML = "Bu spotify hesabı kullanımda. Lütfen başka bir hesap giriniz.";
    setTimeout(() => {
      window.location.href = "/";
    }, 10000)
  })

  socket.on('konfeti', (event) => {

    canvas.width = width;
    canvas.height = height;
    window.requestAnimationFrame(startConfetti);
  });

  // Handle disconnection from the server
  socket.on('disconnect', () => {
    window.location.href = "/logout";
    console.log("close");
  });


  function track(accessToken) {
    let timeout = 2500;
    let isPlaying = false;
    let music = "";
    let duration = 0;

    var checkPlayingInterval = function () {

      spotifyApi.setAccessToken(accessToken);
      spotifyApi.getMyCurrentPlayingTrack().then((data) => {
        if (data.item.name != music || data.is_playing != isPlaying || Math.abs(duration - data.item.duration_ms - data.progress_ms) > 3000) {
          music = data.item.name;
          isPlaying = data.is_playing;
          duration = data.item.duration_ms - data.progress_ms;
          document.getElementById('image').src = data.item.album.images[0].url;
          document.getElementById('name').innerHTML = data.item.name;
          document.getElementById('artist').innerHTML = data.item.artists[0].name;
        } else {
          duration -= timeout;
        }
        setTimeout(checkPlayingInterval, timeout);
      }).catch((err) => {
        console.log(err)
        if (err.status == 401) {
          socket.emit('refreshToken', "{{username}}");
        }
      })
    }
    checkPlayingInterval();
  }
</script>